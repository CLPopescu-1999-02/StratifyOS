
if( ${CMAKE_HOST_SYSTEM_NAME} STREQUAL "Windows" )
	set(CMAKE_MAKE_PROGRAM "C:/StratifyLabs-SDK/Tools/gcc/bin/make.exe" CACHE INTERNAL "Mingw generator" FORCE)
	set(CMAKE_GENERATOR "MinGW Makefiles" CACHE INTERNAL "Mingw generator" FORCE)
endif()

if( ${CMAKE_HOST_SYSTEM_NAME} STREQUAL "Darwin" )
	set(CMAKE_EXEC /Applications/CMake.app/Contents/bin/cmake)
	set(GIT_EXEC /usr/bin/git)
	set(GENERATOR "")
elseif( ${CMAKE_HOST_SYSTEM_NAME} STREQUAL "Windows" )
	set(CMAKE_EXEC cmake.exe)
	set(GIT_EXEC git.exe)
	set(GENERATOR -G "MinGW Makefiles")
endif()

function(sos_pull PROJECT_PATH)
	execute_process(COMMAND ${GIT_EXEC} pull WORKING_DIRECTORY ${PROJECT_PATH} OUTPUT_VARIABLE OUTPUT RESULT_VARIABLE RESULT)
	message(STATUS "git pull " ${PROJECT_PATH} "\n" ${OUTPUT})
	if(RESULT)
		message(FATAL_ERROR " Failed to pull " ${PROJECT_PATH})
	endif()
endfunction()

function(sos_clone REPO_URL WORKSPACE_PATH)
	execute_process(COMMAND ${GIT_EXEC} clone ${REPO_URL} WORKING_DIRECTORY ${WORKSPACE_PATH} OUTPUT_VARIABLE OUTPUT RESULT_VARIABLE RESULT)
	message(STATUS "git clone " ${REPO_URL} to ${WORKSPACE_PATH} "\n" ${OUTPUT})
	if(RESULT)
		message(FATAL_ERROR " Failed to clone " ${PROJECT_PATH})
	endif()
endfunction()

function(sos_clone_or_pull PROJECT_PATH REPO_URL WORKSPACE_PATH)
	#if ${PROJECT_PATH} directory doesn't exist -- clone from the URL
	if(EXISTS ${PROJECT_PATH})
		message(STATUS ${PROJECT_PATH} " already exists: pulling")
		sos_pull(${PROJECT_PATH})
	else()
		message(STATUS ${PROJECT_PATH} " does not exist: cloning")
		sos_clone(${REPO_URL} ${WORKSPACE_PATH})
	endif()

endfunction()

function(sos_build_app PROJECT_PATH)
	set(BUILD_PATH ${PROJECT_PATH}/cmake_arm)
	file(MAKE_DIRECTORY ${BUILD_PATH})
	execute_process(COMMAND ${CMAKE_EXEC} ${GENERATOR} .. WORKING_DIRECTORY ${BUILD_PATH})
	if(RESULT)
		message(FATAL_ERROR " Failed to generate using " ${CMAKE_EXEC} ".. " ${GENERATOR} "	in " ${BUILD_PATH})
	endif()
	if(SOS_BUILD_CLEAN_ALL)
		execute_process(COMMAND ${CMAKE_EXEC} --build . --target clean WORKING_DIRECTORY ${BUILD_PATH})
		if(RESULT)
			message(FATAL_ERROR " Failed to clean using " ${CMAKE_EXEC} "--build . --target clean on " ${PROJECT_PATH})
		endif()
	endif()
	execute_process(COMMAND ${CMAKE_EXEC} --build . --target all -- -j 10 WORKING_DIRECTORY ${BUILD_PATH})
	if(RESULT)
		message(FATAL_ERROR " Failed to build all using " ${CMAKE_EXEC} "--build . --target all -- -j 10 on " ${PROJECT_PATH})
	endif()
endfunction()

function(sos_build_bsp PROJECT_PATH)
	set(BUILD_PATH ${PROJECT}/cmake_arm)
	file(MAKE_DIRECTORY ${BUILD_PATH})
	execute_process(COMMAND ${CMAKE_EXEC} ${GENERATOR} .. WORKING_DIRECTORY ${BUILD_PATH} RESULT_VARIABLE RESULT)
	if(RESULT)
		message(FATAL_ERROR " Failed to generate using " ${CMAKE_EXEC} ".. " ${GENERATOR} "	in " ${BUILD_PATH})
	endif()
	if(RESULT)
		message(FATAL ${CMAKE_EXEC} "Failed")
	endif()
	if(SOS_BUILD_CLEAN_ALL)
		execute_process(COMMAND ${CMAKE_EXEC} --build . --target clean WORKING_DIRECTORY ${BUILD_PATH} RESULT_VARIABLE RESULT)
		if(RESULT)
			message(FATAL_ERROR " Failed to clean using " ${CMAKE_EXEC} "--build . --target clean on " ${PROJECT_PATH})
		endif()
	endif()
	execute_process(COMMAND ${CMAKE_EXEC} --build . --target all -- -j 10 WORKING_DIRECTORY ${BUILD_PATH} RESULT_VARIABLE RESULT)
	if(RESULT)
		message(FATAL_ERROR " Failed to build all using " ${CMAKE_EXEC} "--build . --target all -- -j 10 on " ${PROJECT_PATH})
	endif()
endfunction()

function(sos_build_lib PROJECT_PATH IS_INSTALL CONFIG)
	set(BUILD_PATH ${PROJECT_PATH}/cmake_${CONFIG})
	file(MAKE_DIRECTORY ${PROJECT_PATH}/cmake_${CONFIG})

	if(IS_INSTALL)
		set(TARGET install)
	elseif()
		set(TARGET all)
	endif()


	execute_process(COMMAND ${CMAKE_EXEC} ${GENERATOR} .. WORKING_DIRECTORY ${BUILD_PATH} RESULT_VARIABLE RESULT)
	if(RESULT)
		message(FATAL_ERROR " Failed to generate using " ${CMAKE_EXEC} ".. " ${GENERATOR} "	in " ${BUILD_PATH})
	endif()
	if(CONFIG STREQUAL "link")
		#Sometimes there is a problem building if cmake is only run once
		message(FATAL_ERROR " Failed to generate using " ${CMAKE_EXEC} ".. " ${GENERATOR} "	in " ${BUILD_PATH})
	endif()
	if(SOS_BUILD_CLEAN_ALL)
		execute_process(COMMAND ${CMAKE_EXEC} --build . --target clean WORKING_DIRECTORY ${BUILD_PATH} RESULT_VARIABLE RESULT)
		if(RESULT)
			message(FATAL_ERROR " Failed to clean using " ${CMAKE_EXEC} "--build . --target clean on " ${PROJECT_PATH})
		endif()
	endif()
	execute_process(COMMAND ${CMAKE_EXEC} --build . --target ${TARGET} -- -j 10 WORKING_DIRECTORY ${BUILD_PATH} RESULT_VARIABLE RESULT)
	if(RESULT)
		message(FATAL_ERROR " Failed to build all using " ${CMAKE_EXEC} "--build . --target all -- -j 10 on " ${PROJECT_PATH})
	endif()
endfunction()

